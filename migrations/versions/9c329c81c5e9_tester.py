"""tester

Revision ID: 9c329c81c5e9
Revises: 6645e5442d50
Create Date: 2024-05-11 13:10:10.458945

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9c329c81c5e9'
down_revision = '6645e5442d50'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blacklist_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('token', sa.String(length=500), nullable=False),
    sa.Column('blacklisted_on', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_blacklist_tokens')),
    sa.UniqueConstraint('token', name=op.f('uq_blacklist_tokens_token'))
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('user',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('registered_on', sa.DateTime(), nullable=False),
    sa.Column('admin', sa.Boolean(), nullable=False),
    sa.Column('public_id', sa.String(length=100), nullable=True),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('password_hash', sa.String(length=100), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('date_of_birth', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user'))
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_public_id'), ['public_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)

    op.create_table('portfolio',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name=op.f('fk_portfolio_owner_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_portfolio'))
    )
    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_roles_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_roles_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_roles'))
    )
    op.create_table('property',
    sa.Column('portfolio_id', sa.Integer(), nullable=False),
    sa.Column('purchase_price', sa.Float(precision='10, 2'), nullable=True),
    sa.Column('purchase_date', sa.DateTime(), nullable=True),
    sa.Column('sold_date', sa.DateTime(), nullable=True),
    sa.Column('monthly_rental_price', sa.Float(precision='10, 2'), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolio.id'], name=op.f('fk_property_portfolio_id_portfolio'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_property'))
    )
    op.create_table('address',
    sa.Column('line_1', sa.String(length=100), nullable=True),
    sa.Column('line_2', sa.String(length=100), nullable=True),
    sa.Column('line_3', sa.String(length=100), nullable=True),
    sa.Column('post_code', sa.String(length=100), nullable=True),
    sa.Column('town', sa.String(length=100), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('property_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], name=op.f('fk_address_property_id_property')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_address'))
    )
    op.create_table('propertyImages',
    sa.Column('image', sa.LargeBinary(), nullable=True),
    sa.Column('file_name', sa.String(length=200), nullable=True),
    sa.Column('property_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], name=op.f('fk_propertyImages_property_id_property')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_propertyImages'))
    )
    op.create_table('tenant',
    sa.Column('property_id', sa.Integer(), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('email_address', sqlalchemy_utils.types.email.EmailType(length=255), nullable=True),
    sa.Column('title', sa.Enum('MR', 'MRS', 'MISS', 'MS', 'LORD', 'SIR', 'DR', 'LADY', 'DAME', 'PROFESSOR', 'MX', name='titleenum'), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('date_of_birth', sa.Date(), nullable=True),
    sa.Column('job_title', sa.String(length=100), nullable=True),
    sa.Column('tenancy_start_date', sa.Date(), nullable=False),
    sa.Column('tenancy_end_date', sa.Date(), nullable=True),
    sa.Column('smoker', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], name=op.f('fk_tenant_property_id_property')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tenant'))
    )
    op.create_table('tenant-profile',
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('image', sa.LargeBinary(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], name=op.f('fk_tenant-profile_tenant_id_tenant')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tenant-profile'))
    )
    op.create_table('tenantNote',
    sa.Column('tenant_id', sa.Integer(), nullable=True),
    sa.Column('note', sa.String(length=2000), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenant.id'], name=op.f('fk_tenantNote_tenant_id_tenant')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tenantNote'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tenantNote')
    op.drop_table('tenant-profile')
    op.drop_table('tenant')
    op.drop_table('propertyImages')
    op.drop_table('address')
    op.drop_table('property')
    op.drop_table('user_roles')
    op.drop_table('portfolio')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_username'))
        batch_op.drop_index(batch_op.f('ix_user_public_id'))
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('roles')
    op.drop_table('blacklist_tokens')
    # ### end Alembic commands ###
